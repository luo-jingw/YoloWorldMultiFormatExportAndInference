TFLite Model Loading and Information Export
============================================================


============================================================
Model Information: Text Encoder (text_encoder.tflite)
============================================================

Input Information (Total: 2):
----------------------------------------
Input 1:
  Name: serving_default_attention_mask:0
  Shape: [ 1 77]
  Data Type: <class 'numpy.int64'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Input 2:
  Name: serving_default_input_ids:0
  Shape: [ 1 77]
  Data Type: <class 'numpy.int64'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output Information (Total: 1):
----------------------------------------
Output 1:
  Name: StatefulPartitionedCall:0
  Shape: [  1   1 512]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}


============================================================
Model Information: Visual Encoder (visual_encoder.tflite)
============================================================

Input Information (Total: 1):
----------------------------------------
Input 1:
  Name: serving_default_image:0
  Shape: [  1   3 640 640]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output Information (Total: 3):
----------------------------------------
Output 1:
  Name: PartitionedCall:2
  Shape: [  1 640  20  20]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output 2:
  Name: PartitionedCall:1
  Shape: [  1 640  40  40]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output 3:
  Name: PartitionedCall:0
  Shape: [  1 320  80  80]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}


============================================================
Model Information: Post-processing Model (post_prediction.tflite)
============================================================

Input Information (Total: 5):
----------------------------------------
Input 1:
  Name: serving_default_feat_2:0
  Shape: [  1 640  20  20]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Input 2:
  Name: serving_default_txt_masks:0
  Shape: [1 1]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Input 3:
  Name: serving_default_feat_1:0
  Shape: [  1 640  40  40]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Input 4:
  Name: serving_default_text_feats:0
  Shape: [  1   1 512]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Input 5:
  Name: serving_default_feat_0:0
  Shape: [  1 320  80  80]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output Information (Total: 6):
----------------------------------------
Output 1:
  Name: PartitionedCall:1
  Shape: [ 1  4 40 40]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output 2:
  Name: PartitionedCall:0
  Shape: [ 1  4 80 80]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output 3:
  Name: PartitionedCall:3
  Shape: [ 1  1 80 80]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output 4:
  Name: PartitionedCall:2
  Shape: [ 1  4 20 20]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output 5:
  Name: PartitionedCall:4
  Shape: [ 1  1 40 40]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}

Output 6:
  Name: PartitionedCall:5
  Shape: [ 1  1 20 20]
  Data Type: <class 'numpy.float32'>
  Quantization Parameters: {'scales': array([], dtype=float32), 'zero_points': array([], dtype=int32), 'quantized_dimension': 0}


============================================================
Start Testing Model Inference
============================================================

============================================================
Testing Model Inference: Text Encoder
============================================================
Created Dummy Inputs:
  attention_mask: shape=(1, 77), dtype=int64
  input_ids: shape=(1, 77), dtype=int64

Starting Inference...
Inference Completed!

Output Results:
  Output 1 (StatefulPartitionedCall:0): shape=(1, 1, 512), dtype=float32
    Value Range: [-0.159113, 0.615448]
    Mean: 0.001945, Std: 0.044151

Model Text Encoder Test Successful!

============================================================
Testing Model Inference: Visual Encoder
============================================================
Created Dummy Inputs:
  image: shape=(1, 3, 640, 640), dtype=float32

Starting Inference...
Inference Completed!

Output Results:
  Output 1 (PartitionedCall:2): shape=(1, 640, 20, 20), dtype=float32
    Value Range: [-0.278465, 8.264250]
    Mean: 0.003990, Std: 0.542195
  Output 2 (PartitionedCall:1): shape=(1, 640, 40, 40), dtype=float32
    Value Range: [-0.278465, 13.239716]
    Mean: -0.050589, Std: 0.588863
  Output 3 (PartitionedCall:0): shape=(1, 320, 80, 80), dtype=float32
    Value Range: [-0.278465, 11.051686]
    Mean: 0.009985, Std: 0.578345

Model Visual Encoder Test Successful!

============================================================
Testing Model Inference: Post-processing Model
============================================================
Created Dummy Inputs:
  feat_2: shape=(1, 640, 20, 20), dtype=float32
  txt_masks: shape=(1, 1), dtype=float32
  feat_1: shape=(1, 640, 40, 40), dtype=float32
  text_feats: shape=(1, 1, 512), dtype=float32
  feat_0: shape=(1, 320, 80, 80), dtype=float32

Starting Inference...
Inference Completed!

Output Results:
  Output 1 (PartitionedCall:1): shape=(1, 4, 40, 40), dtype=float32
    Value Range: [0.017787, 10.129872]
    Mean: 1.640886, Std: 1.621521
  Output 2 (PartitionedCall:0): shape=(1, 4, 80, 80), dtype=float32
    Value Range: [0.015275, 14.304466]
    Mean: 2.296565, Std: 2.179005
  Output 3 (PartitionedCall:3): shape=(1, 1, 80, 80), dtype=float32
    Value Range: [-15.060498, -9.658628]
    Mean: -11.709970, Std: 0.755158
  Output 4 (PartitionedCall:2): shape=(1, 4, 20, 20), dtype=float32
    Value Range: [0.151758, 3.533957]
    Mean: 0.804373, Std: 0.471417
  Output 5 (PartitionedCall:4): shape=(1, 1, 40, 40), dtype=float32
    Value Range: [-21.256172, -12.201615]
    Mean: -18.563269, Std: 1.153628
  Output 6 (PartitionedCall:5): shape=(1, 1, 20, 20), dtype=float32
    Value Range: [-15.666460, -3.251409]
    Mean: -12.702140, Std: 2.199371

Model Post-processing Model Test Successful!
